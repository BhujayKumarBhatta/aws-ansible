---
- name: create a VPC 
  ec2_vpc_net:
    aws_access_key: "{{ec2_access_key}}"
    aws_secret_key: "{{ec2_secret_key}}"
    region: "{{ vpc_region }}"    
    name: "{{ vpc_name }}"    
    cidr_block: "{{ vpc_cidr }}"    
    tags: "{{ vpc_resource_tags }}"      
    tenancy: "{{ vpc_tenancy }}"
    dns_support : "{{ vpc_dns_support }}"
    dns_hostnames: "{{ vpc_dns_hostnames }}"
  register: created_vcp
    
- ec2_vpc_net_facts:
     aws_access_key: "{{ec2_access_key}}"
     aws_secret_key: "{{ec2_secret_key}}"
     region: "{{ vpc_region }}" 
  register: all_vpc
  
  
# - debug: 
#     var: created_vcp.vpc.id
    #verbosity: 4
    
- ec2_vpc_igw:
    aws_access_key: "{{ec2_access_key}}"
    aws_secret_key: "{{ec2_secret_key}}"
    region: "{{ vpc_region }}" 
    vpc_id: "{{ created_vcp.vpc.id }}"
    state: "{{ vpc_internet_gateway }}"
  register: created_igw
  
# - debug: 
#     var: created_igw
    
- name: Create subnets within VPC
  ec2_vpc_subnet:
    aws_access_key: "{{ec2_access_key}}"
    aws_secret_key: "{{ec2_secret_key}}"
    region: "{{ vpc_region }}"  
    state: present
    vpc_id: "{{ created_vcp.vpc.id }}"
    cidr: "{{ item.cidr }}"
    map_public : "{{ item.assign_pub_ip_to_instance }}"
    resource_tags:
      Name: "{{ item.name }}"
  register: created_subnet
  with_items: "{{ vpc_subnets }}"

# - debug: 
#     var: created_subnet.results[0]
    #verbosity: 4
    
# - debug:
#     msg: "{{ item }}"
#   when: item.item.name == "app_subnet"
#   with_items: "{{ created_subnet.results }}"
  
  
  
- name: Set up public subnet route table
  ec2_vpc_route_table:
    aws_access_key: "{{ec2_access_key}}"
    aws_secret_key: "{{ec2_secret_key}}"
    region: "{{ vpc_region }}"  
    vpc_id: "{{ created_vcp.vpc.id }}"  
    purge_routes: "{{ purge_existing_routes_from_subnet}}"
    tags:
      Name: Public
    subnets: 
      - "{{ item.subnet.id }}"     
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ created_igw.gateway_id }}"
  when: item.item.route_to_internet_gateway == True
  with_items: "{{ created_subnet.results }}"
  register: public_route_table

  
    

    
    
    