---
- name: Gather facts about all VPC subnet 
  ec2_vpc_subnet_facts:
    aws_access_key: "{{ec2_access_key}}"
    aws_secret_key: "{{ec2_secret_key}}"
    region: "{{ vpc_region }}" 
#     filters:
#       "tag:Name": "{{ item.vpc_subnet_name }}"
#   with_items: "{{ list_of_computes }}"
  register: subnnet_facts
  tags:
    - ec2
        
- debug:
    msg: "{{subnnet_facts | json_query('subnets') }}"
  tags:
    - ec2
    
- debug:
    msg: "{{subnnet_facts | json_query('subnets[?tags.Name==`app_subnet`].id') }}"
  tags:
    - ec2
    
- debug:  
    msg: "{{subnnet_facts | json_query(qry) | join(', ') }}"
  vars:
     qry: "subnets[?tags.Name=='{{item.vpc_subnet_name}}'].id"
  with_items: "{{ list_of_computes }}"  
  tags:
    - ec2

# - name: Launch instance
#   ec2:
#      aws_access_key: "{{ec2_access_key}}"
#      aws_secret_key: "{{ec2_secret_key}}"
#      region: "{{ item.region }}" 
#      instance_type: "{{ item.instance_type }}"
#      image: "{{ item.image }}"
#      key_name: "{{item.key_name }}"
#      group: "{{ item.security_groups }}"
#      vpc_subnet_id: "{{subnnet_facts | json_query(qry) | join(', ')}}"
#      assign_public_ip: "{{ item.assign_public_ip }}"
#      monitoring: "{{ item.monitoring }}"    
#      tenancy: "{{ item.tenancy }}"
#      instance_tags: "{{ item.instance_tags }}"
#      count_tag:
#       Name: "{{ item.name }}"
#      count: "{{ item.count }}"
#      state: "{{ item.state}}"
#      wait: true
#      wait_timeout: 500
#   vars:
#      qry: "subnets[?tags.Name=='{{item.vpc_subnet_name}}'].id"
#   with_items: "{{ list_of_computes }}"  
#   register: ec2_list
#   tags:
#     - ec2
    
- name: Launch instance
  ec2_instance:
     aws_access_key: "{{ec2_access_key}}"
     aws_secret_key: "{{ec2_secret_key}}"
     region: "{{ item.region }}" 
     #filters:
     name: "{{ item.name }}"
     instance_type: "{{ item.instance_type }}"
     image_id: "{{ item.image_id }}"
     key_name: "{{item.key_name }}"
     security_groups: "{{ item.security_groups }}"
     vpc_subnet_id: "{{subnnet_facts | json_query(qry) | join(', ')}}"
     network:
       assign_public_ip: "{{ item.assign_public_ip }}"
     detailed_monitoring : "{{ item.monitoring }}"    
     tenancy: "{{ item.tenancy }}"
     tags: "{{ item.instance_tags }}"     
     state: "{{ item.state}}"
     wait: true
     wait_timeout: 500
  vars:
     qry: "subnets[?tags.Name=='{{item.vpc_subnet_name}}'].id"
  with_items: "{{ list_of_computes }}"  
  register: ec2_list
  tags:
    - ec2
    
- debug:
    var: ec2_list
  tags:
    - ec2

# 
# - debug: 
#     msg: "{{ item.0.vpc_subnet_name }} and {{ item.1.item.name }} "
#   with_together: 
#     - "{{ list_of_computes }}"
#     - "{{ created_subnet.results }}"
#   ignore_errors: yes

 #{% if i.subnet.tags.Name == item.vpc_subnet_name %}
 #{% endif %}